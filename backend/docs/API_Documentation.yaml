openapi: 3.0.3
info:
  title: FiBo API Documentation
  description: This is the Documentation for the API that is provided by our Django Backend
  version: 1.0.1
servers:
  - url: 'http://127.0.0.1:8000'
tags:
  - name: user
    description: Everything that has has to do with users like registration and login
  - name: cashflow
    description: CRUD for Cashflows
  - name: source
    description: Create and read operations for sources (Store/Private)
  - name: category
    description: Create and read operations for category
  - name: item
    description: Create and read operations for item

paths:
  /users/register/:
    post:
      tags:
        - user
      summary: Creates a new user
      description: '`Awaits` email and password in the request body. `Creates` a new user with a default account in the database.'
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/register'
      responses:
        '201':
          description: User was successfully created
        '400':
          $ref: '#/components/responses/400'
        '500':
          description: The User could not be created. There could already be a user with the same email
  /users/login/:
    post:
      tags:
        - user
      summary: Returns Access and Refresh Token
      description: '`Awaits` email and password in the request body. `Returns` an Access and Refresh Token for the given user.'
      operationId: loginUser
      requestBody:
        $ref: '#/components/requestBodies/login'
      responses:
        '200':
          $ref: '#/components/responses/login'
        '400':
          $ref: '#/components/responses/400'
        '401':
          description: There is no matching user in the database
  /users/authenticate/:
    post:
      tags:
        - user
      summary: Returns an refreshed Access Token
      description: '`Awaits` an Refresh Token and returns an refreshed Access Token.'
      operationId: authenticateUser
      requestBody:
        $ref: '#/components/requestBodies/authenticate'
      responses:
        '200':
          $ref: '#/components/responses/authenticate'
        '400':
          description: Refresh Token is missing from the Request Body
        '401':
          $ref: '#/components/responses/refreshError'
  /users/get/:
    get:
      tags:
        - user
      summary: Gets user data from database
      description: '`Returns` the data from the database corresponding to the user that is sending the request.'
      operationId: getUser
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          $ref: '#/components/responses/getUser'
        '401':
          $ref: '#/components/responses/accessError'
  /users/delete/:
    delete:
      tags:
        - user
      summary: Deletes an existing user
      description: '`Deletes` the user from the Database, that is sending the request.'
      operationId: deleteUser
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      responses:
        '200':
          description: The Account corresponding to the send Access Token is deleted
        '401':
          $ref: '#/components/responses/accessError'
  /cashflows/:
    post:
      tags:
        - cashflow
      summary: Creates a new Cashflow
      description: '`Awaits` all the data needed for a Cashflow in the request body. `Creates` a Cashflow with this data in the database.'
      operationId: createCashflow
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/postCashflow'
      responses:
        '200':
          $ref: '#/components/responses/postCashflow.200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
        '500':
          description: The Cashflow could not be created. There are multiple reasons, for this. For example the account id form the request may be not in the database
  /cashflows/<int:cashflow_id>/:
    get:
      tags:
        - cashflow
      summary: Returns a Cashflow
      description: '`Awaits` id of a Cashflow as an url parameter. `Returns` the corresponding Cashflow.'
      operationId: getCashflow
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
        - $ref: '#/components/parameters/cashflow_id'
      responses:
        '200':
          $ref: '#/components/responses/getCashflow.200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
        '500':
          $ref: '#/components/responses/cashflows.500'
    put:
      tags:
        - cashflow
      summary: Updates a Cashflow
      description: '`Awaits` an Cashflow_ID and all the data needed for a Cashflow. `Updates` the Cashflow with the given ID.'
      operationId: putCashflow
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
        - $ref: '#/components/parameters/cashflow_id'
      requestBody:
        $ref: '#/components/requestBodies/putCashflow'
      responses:
        '200':
          $ref: '#/components/responses/putAndDeleteCashflow.200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
        '500':
          $ref: '#/components/responses/cashflows.500'
    delete:
      tags:
        - cashflow
      summary: Deletes an Cashflow
      description: '`Awaits` an Cashflow_ID. `Deletes` the Cashflow with the given ID.'
      operationId: deleteCashflow
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
        - $ref: '#/components/parameters/cashflow_id'
      responses:
        '200':
          $ref: '#/components/responses/putAndDeleteCashflow.200'
        '401':
          $ref: '#/components/responses/accessError'
        '500':
          $ref: '#/components/responses/cashflows.500'
  /sources/stores/:
    post:
      tags:
        - source
      summary: Creates a new Store
      description: '`Awaits` all the data needed for a Store as well as the account-id in the request body. `Creates` a Store with this data in the database.'
      operationId: postStore
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/postStore'
      responses:
        '200':
          $ref: '#/components/responses/postStore'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
    get:
      tags:
        - source
      summary: Returns a Store
      description: '`Awaits` the id of a Store as an url parameter. `Returns` the Store with the given id.'
      operationId: getStore
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/getStore'
      responses:
        '200':
          $ref: '#/components/responses/getStore'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
  /sources/privates/:
    post:
      tags:
        - source
      summary: Creates an new Private entity
      description: '`Awaits` all the data needed for a Private as well as the account-id in the request body. `Creates` a Private entity with this data in the database.'
      operationId: postPrivate
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/postPrivate'
      responses:
        '200':
          $ref: '#/components/responses/postPrivate'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
    get:
      tags:
        - source
      summary: Returns a Store
      description: '`Awaits` the id of a Private entity as an url parameter. `Returns` the Private entity with the given id.'
      operationId: getStore
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/getStore'
      responses:
        '200':
          $ref: '#/components/responses/getStore'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
  /cashflows/<int:cashflow_id>/items/<int:item_id>/:
    get:
      tags:
        - item
      summary: Returns an item
      description: '`Awaits` id of an item as well as the corresponding cashflow as url parameters. `Returns` the corresponding Item.'
      operationId: getItem
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
        - $ref: '#/components/parameters/cashflow_id'
        - $ref: '#/components/parameters/item_id'
      responses:
        '200':
          $ref: '#/components/responses/getItem.200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
        '500':
          $ref: '#/components/responses/cashflows.500'
  /cashflows/<int:cashflow_id>/items/:
    post:
      tags:
        - item
      summary: Creates a new Item
      description: '`Awaits` all the data needed for an Item in the request body as well as cashflow_id as an Url parameter. `Creates` a Private entity with this data in the database.'
      operationId: postItem
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
        - $ref: '#/components/parameters/cashflow_id'
      requestBody:
        $ref: '#/components/requestBodies/postItem'
      responses:
        '200':
          $ref: '#/components/responses/postItem.200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
        '500':
          $ref: '#/components/responses/item.500'
  /categories/:
    post:
      tags:
        - category
      summary: Creates an new Category
      description: '`Awaits` a name for a Category in the request body. `Creates` a Category with this name in the database.'
      operationId: postCategory
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/category'
      responses:
        '200':
          $ref: '#/components/responses/postCategory'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'
    get:
      tags:
        - category
      summary: Returns a Category
      description: '`Awaits` id of a Category as an url parameter. `Returns` the corresponding Category'
      operationId: getCategory
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/auth'
      requestBody:
        $ref: '#/components/requestBodies/category'
      responses:
        '200':
          $ref: '#/components/responses/getCategory'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/accessError'

components:
  schemas:
    users:
      required:
        - id
        - email
        - password
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: theUser@fibo.de
        password:
          type: string
          example: 'password'
        last_login:
          type: string
          format: date
          example: "2023-04-20 07:56:12.809812+00"
        is_superuser:
          type: boolean
          example: false
        is_active:
          type: boolean
          example: true
        date_joined:
          type: string
          format: date
          example: "2023-04-15 12:23:59.602445+00"
        account:
            $ref: '#/components/schemas/account'
    cashflows:
      required:
        - id
        - is_income
        - overall_value
        - category
        - source
        - account_id
      type: object
      properties:
        id:
          type: integer
          example: 1
        is_income:
          type: boolean
          example: false
        overall_value:
          type: integer
          example: 10
        created:
          type: string
          format: date
          example: "2023-04-20 07:56:12.809812+00"
        updated:
          type: string
          format: date
          example: "2023-04-15 12:23:59.602445+00"
        category:
          $ref: '#/components/schemas/category'
        source:
          $ref: '#/components/schemas/source'
        account:
          $ref: '#/components/schemas/account'
    category:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'HEALTH'
    source:
      required:
        - id
        - account
      type: object
      properties:
        id:
          type: integer
          example: 1
        account:
          $ref: '#/components/schemas/account'
    private:
      allOf:
        - $ref: '#/components/schemas/source'
        - type: object
        - required:
          - first_name
          - last_name
        - properties:
            first_name:
              type: string
              example: 'Max'
            last_name:
              type: string
              example: 'Mustermann'
    store:
      allOf:
        - $ref: '#/components/schemas/source'
        - type: object
        - required:
          - name
          - street
          - zip
          - house_number
        - properties:
            name:
              type: string
              example: 'dm'
            street:
              type: string
              example: 'Ottostraße'
            house_number:
              type: string
              example: '13a'
            zip:
              $ref: '#/components/schemas/zip'
    zip:
      type: object
      required:
        - zip
        - city
      properties:
        zip:
          type: integer
          example: 76133
        city:
          type: string
          example: "Karlsruhe"
    account:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'WG-Account'
        created:
          type: string
          format: date
          example: "2023-04-20 07:56:12.809812+00"
        updated:
          type: string
          format: date
          example: "2023-04-15 12:23:59.602445+00"
    item:
      required:
        - id
        - name
        - amount
        - value
        - cashflow
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Shampoo'
        value:
          type: number
          example: 1.99
        amount:
          type: integer
          example: 1

  responses:
    login:
      description: Successful operation. Returns Access and Refresh Token
      content:
        application/json:
          schema:
            type: object
            required:
              - refresh
              - access
            properties:
              refresh:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MjA4OTg4OCwiaWF0IjoxNjgyMDAzNDg4LCJqdGkiOiI3MzdhYTgyYzMzMWM0YjQ2ODlhYzg0ZDQ5Mjg1ZjVmYiIsInVzZXJfaWQiOjEyfQ.svQ9j-U-Q73lfWKt5D_J4s6PLrzrCNInm8giQ1Y_AJY
              access:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjgyMDAzNzg4LCJpYXQiOjE2ODIwMDM0ODgsImp0aSI6ImYxZjQwOGFlMGE3NTQ4YzA5MTliMDI2ZTRlMmVmZDViIiwidXNlcl9pZCI6MTJ9.9JvhtWabcVov5W0igXBFhWPEKiuP3wFDOLr8UHyJU3w
    authenticate:
      description: Successful operation. Returns Access Token
      content:
        application/json:
          schema:
            type: object
            required:
              - access
            properties:
               access:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjgyMDA0MjU1LCJpYXQiOjE2ODIwMDM0ODgsImp0aSI6IjkyOTg3OGEyMmI5OTRmOWQ4OWQ5ZjE4MGVkOGY2OGExIiwidXNlcl9pZCI6MTJ9._ebETDmruZkTsus4tp-1_rcEwRlLcza1ABGcDXwwGnM
    getUser:
      description: Successful operation. The User corresponding to the send Access Token is returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/users'
    accessError:
      description: Access token is missing or invalid
    refreshError:
      description: Refresh token is missing or invalid
    postCashflow.200:
      description: Cashflow was successfully created
      content:
        application/json:
          schema:
            properties:
              success:
                type: boolean
                example: true
              cashflow_id:
                type: integer
                example: 1
              creation_date:
                type: string
                format: date
                example: "2023-04-20 07:56:12.809812+00"
    getCashflow.200:
      description: Successful operation. The Cashflow corresponding to the send Cashflow_ID is returned.
      content:
        application/json:
          schema:
            properties:
              id:
                type: integer
                example: 1
              is_income:
                type: boolean
                example: false
              overall_value:
                type: integer
                example: 10
              created:
                type: string
                format: date
                example: "2023-04-20 07:56:12.809812+00"
              updated:
                type: string
                format: date
                example: "2023-04-15 12:23:59.602445+00"
              category:
                type: integer
                example: 1
              place:
                type: integer
                example: 1
              account:
                type: integer
                example: 1
    putAndDeleteCashflow.200:
      description: Successful operation. The Cashflow corresponding to the send Cashflow_ID was updated.
      content:
        application/json:
          schema:
            properties:
              success:
                type: boolean
                example: true
              cashflow_id:
                type: integer
                example: 1
    cashflows.500:
      description: 'The Cashflow could not be deleted. Probably you forgot the `cashflow_id` in the URL Path'
    postPlace:
      description: Place was successfully created
      content:
        application/json:
          schema:
            properties:
              success:
                type: boolean
                example: true
              place:
                type: string
                example: Kaufland
    getPlace:
      description: Place was successfully returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/place'
    postCategory:
      description: Category was successfully created
      content:
        application/json:
          schema:
            properties:
              success:
                type: boolean
                example: true
              category_id:
                type: integer
                example: 1
    getCategory:
      description: Category was successfully returned
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/category'

    400:
      description: Some fields are missing from the Request Body

  requestBodies:
    register:
      description: User data for registration
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: User@fibo.de
              password:
                type: string
                example: password
    login:
      description: User data for registration
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                example: User@fibo.de
              password:
                type: string
                example: password
    authenticate:
      description: Refresh Token
      content:
        application/json:
          schema:
            type: object
            required:
              - refresh
            properties:
              refresh:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MjA4OTg4OCwiaWF0IjoxNjgyMDAzNDg4LCJqdGkiOiI3MzdhYTgyYzMzMWM0YjQ2ODlhYzg0ZDQ5Mjg1ZjVmYiIsInVzZXJfaWQiOjEyfQ.svQ9j-U-Q73lfWKt5D_J4s6PLrzrCNInm8giQ1Y_AJY
    postCashflow:
      description: Cashflow data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - is_income
              - overall_value
              - category
              - account
            properties:
              id:
                type: integer
                example: 1
              is_income:
                type: boolean
                example: false
              overall_value:
                type: integer
                example: 10
              category:
                $ref: '#/components/schemas/category'
              place:
                $ref: '#/components/schemas/place'
              account:
                $ref: '#/components/schemas/account'
    putCashflow:
      description: Cashflow data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
              - is_income
              - overall_value
              - category
              - account
            properties:
              id:
                type: integer
                example: 1
              is_income:
                type: boolean
                example: false
              overall_value:
                type: integer
                example: 10
              category:
                $ref: '#/components/schemas/category'
              place:
                $ref: '#/components/schemas/place'
    postPlace:
      description: Place data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - address
              - name
            properties:
              address:
                type: string
                example: 'Ottostraße 5'
              name:
                type: string
                example: 'Kaufland'
    getPlace:
      description: Place data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - address
            properties:
              address:
                type: string
                example: 'Ottostraße 5'
    postItem:
      description: Item data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - amount
              - value
            properties:
              name:
                type: string
                example: 'Shampoo'
              amount:
                type: integer
                example: 1
              value:
                type: number
                example: 1.99
    getItem:
      description: Item data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: number
                example: 1
    category:
      description: Category data
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: 'HEALTH'

  parameters:
    auth:
      name: 'Authorization'
      in: header
      description: 'The `Access Token` to be passed as a header'
      required: true
      schema:
        type: string
        example: "Authorization: Bearer <token>"
    cashflow_id:
      name: 'cashflow_id'
      in: path
      description: 'The `cashflow_id` of the Cashflow that should be deleted'
      required: true
      schema:
        type: integer
        example: 1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
